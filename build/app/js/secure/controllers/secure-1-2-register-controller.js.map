{"version":3,"names":[],"mappings":"","sources":["secure/controllers/secure-1-2-register-controller.js"],"sourcesContent":["(function () {\n  'use strict';\n\n  angular.module('secure')\n    .controller('SecureRegisterCtrl', Ctrl);\n\n  Ctrl.$inject = ['$document', '$state', '$translate', 'dialogs', 'vcRecaptchaService',\n                  'APP_CONFIG', 'InApiUtils', 'InApiValidator', 'ValidationSummary', 'SecureAuth'];\n\n  function Ctrl($document, $state, $translate, dialogs, vcRecaptchaService,\n                APP_CONFIG, InApiUtils, InApiValidator, ValidationSummary, SecureAuth) {\n    var vm = this, reCaptchaWidgetId = '', isRecaptchaValid = false;\n\n    vm.isSending = false;\n    vm.siteKey = APP_CONFIG.reCaptchaSiteKey;\n\n    function validateForm() {\n      var un = vm.un || '', email = vm.email || '', pwd = vm.pwd || '', pwdConfirmed = vm.pwdConfirmed || '',\n          isAgreeWith = vm.isAgreeWith, summary = ValidationSummary;\n\n      summary.clear();\n\n      if (!un) {\n        summary.push('帳號不得為空');\n      } else {\n        if (un.length < 6) {\n          summary.push('帳號不得少於 6 個字');\n        }\n\n        if (!InApiValidator.isValidUn(un)) {\n          summary.push('帳號僅允許英文或數字');\n        }\n      }\n\n      if (!email || email.length < 1) {\n        summary.push('電子信箱不得為空');\n      } else if (!InApiValidator.isValidEmail(email)) {\n        summary.push('電子信箱需符合 xxx@xxxx.xxx 格式');\n      } else if (email.length > 64) {\n        summary.push('電子信箱長度不得超過 64 個字元');\n      }\n\n      if (!pwd || pwd.length < 1) {\n        summary.push('密碼不得為空');\n      } else if (!InApiValidator.isValidPassword(pwd)) {\n        summary.push('密碼須英數字混和');\n      } else if (pwd.length < 8 || pwd.length > 12) {\n        summary.push('密碼長度須介於 8 ~ 12');\n      }\n\n      if (!pwdConfirmed || pwdConfirmed.length < 1) {\n        summary.push('確認密碼不得為空');\n      } else if (pwd !== pwdConfirmed) {\n        summary.push('密碼與確認密碼需相同');\n      }\n\n      if (!isAgreeWith) {\n        summary.push('請閱讀並勾選\"已閱讀並同意服務條款\"');\n      }\n\n      if (!isRecaptchaValid) {\n        summary.push('請確實勾選\"我不是機器人\"核選方塊');\n      }\n\n      if (summary.count() > 0) {\n        dialogs.notify('表單驗證有誤', summary.flush());\n        return false;\n      }\n\n      return true;\n    }\n\n    /* eslint complexity:0 */\n    function handleErrCode(err) {\n      err = err || {code: ''};\n\n      switch (err.code) {\n        case '0':\n          dialogs.notify('註冊成功', '請至所註冊的信箱收取確認信，進行帳號開通。');\n          vm.un = vm.email = vm.pwd = vm.pwdConfirmed = '';\n          vm.isAgreeWith = false;\n          $state.go('secure.register-result');\n          break;\n        case 'r9001':\n          dialogs.notify('表單驗證失敗', '請確實勾選\"我不是機器人\"核選方塊');\n          break;\n        case '7000':\n          dialogs.notify('註冊失敗', '伺服器發生錯誤，請稍後再次提交表單。');\n          break;\n        case '7002':\n          dialogs.notify('註冊失敗', '操作失敗，請重新提交表單。');\n          break;\n        case '7003':\n          dialogs.notify('註冊失敗', '操作不完全，請重新提交表單。');\n          break;\n        case '7109':\n          dialogs.notify('註冊失敗', '密碼與確認密碼不相同，請檢查後重新輸入。');\n          vm.pwd = vm.pwdConfirmed = '';\n          break;\n        case '7100':\n          dialogs.notify('註冊失敗', '表單提交資訊有誤，請檢查後重新輸入。');\n          break;\n        case '7114':\n          dialogs.notify('註冊失敗', '使用者帳號或信箱已被使用，請重新輸入。');\n          vm.un = vm.email = '';\n          break;\n        default:\n          dialogs.notify(\n            '註冊失敗',\n            InApiUtils.stringFormat('發生未知錯誤，錯誤代碼：{0}, 錯誤訊息：{1}', err.code, err.msg)\n          );\n          vm.un = vm.email = '';\n          break;\n      }\n    }\n\n    function doSubmit() {\n      var userId, backUrl, postParams;\n\n      if (validateForm()) {\n        userId = vm.un.toLowerCase();\n        backUrl = SecureAuth.getUserVerifyBackUrl(userId);\n        /* jshint camelcase:false */\n        /* eslint camelcase:0 */\n        postParams = {\n          this_user_id: userId,\n          this_apsystem: 'DPA',\n          pwd: vm.pwd || '',\n          cfm_pwd: vm.pwdConfirmed || '',\n          email: vm.email.toLowerCase(),\n          'g-recaptcha-response': vm.gResponse || '',\n          mail_subject: $translate.instant('REGISTER_MAIL_SUBJECT'),\n          mail_content: InApiUtils.stringFormat($translate.instant('REGISTER_MAIL_CONTENT'), backUrl)\n        };\n\n        vm.isSending = true;\n\n        SecureAuth.doRegister(postParams)\n          .then(function (resData) {\n            handleErrCode(resData.err);\n          }, function () {\n            dialogs.notify('註冊失敗', '伺服器拒絕存取，請稍後再次提交表單。');\n          }).finally(function () {\n            vm.isSending = false;\n            resetRecaptcha();\n          });\n      }\n\n      return false;\n    }\n\n    function showUseOfTerms() {\n      dialogs.notify('InAPI 使用條款', $document[0].getElementById('secure_1_4_template').innerHTML, {size: 'lg'});\n    }\n\n    function setWidgetId(widgetId) {\n      reCaptchaWidgetId = widgetId;\n    }\n\n    function setRecaptchaIsChecked() {\n      isRecaptchaValid = true;\n    }\n\n    function resetRecaptcha() {\n      isRecaptchaValid = false;\n      vcRecaptchaService.reload(reCaptchaWidgetId);\n    }\n\n    vm.doSubmit = doSubmit;\n    vm.showUseOfTerms = showUseOfTerms;\n    vm.setWidgetId = setWidgetId;\n    vm.setRecaptchaIsChecked = setRecaptchaIsChecked;\n    vm.resetRecaptcha = resetRecaptcha;\n\n    return vm;\n  }\n}());\n"],"file":"secure-1-2-register-controller.js"}