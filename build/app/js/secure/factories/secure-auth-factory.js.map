{"version":3,"names":[],"mappings":"","sources":["secure/factories/secure-auth-factory.js"],"sourcesContent":["(function () {\n  'use strict';\n\n  angular.module('secure')\n    .factory('SecureAuth', SecureAuth);\n\n  SecureAuth.$inject = ['$q', 'base64', 'APP_CONFIG', 'StorageAPI', 'InApiUtils', 'DataAdapter', 'DeviceDAO'];\n\n  function SecureAuth($q, base64, APP_CONFIG, StorageAPI, InApiUtils, DataAdapter, DeviceDAO) {\n    var service = {}, apiUrls;\n\n    apiUrls = {\n      login: '/ec/oauth/token',\n      register: '/api/core/1/common/user_register',\n      resendVerification: '/api/core/1/common/resend_verification',\n      changeEmail: '/api/core/1/common/user_email',\n      forgetPwd: '/api/core/1/common/forget_password',\n      resetPwd: '/api/core/1/common/reset_password',\n      verifyUser: '/api/core/1/common/user_verify'\n    };\n\n    function isLogin() {\n      return StorageAPI.isTokenValid('me');\n    }\n\n    function doLogin(un, pwd) {\n      var defer = $q.defer(), postParams;\n\n      un = (un || '').toLowerCase();\n      pwd = pwd || '';\n      postParams = {\n        username: un,\n        password: pwd\n      };\n\n      /* jshint camelcase:false */\n      /* eslint camelcase:0 */\n      DataAdapter.requestAuthSvrPassword(apiUrls.login, 'DPA', postParams)\n        .then(function (res) {\n          var expiresIn;\n\n          res = res || {};\n          expiresIn = parseInt(res.expires_in, 10) || 0;\n\n          if (expiresIn > 0 && res.access_token) {\n            StorageAPI.setMyUserId(un);\n            StorageAPI.setToken('me', res.access_token, expiresIn);\n            StorageAPI.writeToken('me');\n            defer.resolve(InApiUtils.generateErrPack('auth.success.0001', 'Login successfully.'));\n          } else {\n            defer.reject(InApiUtils.generateErrPack('auth.failure.0001', 'Invalid username or password.'));\n          }\n        }, function (resData) {\n          var err = resData.err || {};\n\n          if (err.code === '400' && err.msg && err.msg.indexOf('[User is disabled]') > -1) {\n            StorageAPI.setMyUserId(un);\n            defer.reject(InApiUtils.generateErrPack('auth.failure.0002', 'User is disabled.'));\n          } else {\n            defer.reject(InApiUtils.generateErrPack('auth.failure.0001', 'Invalid username or password.'));\n          }\n        });\n\n      return defer.promise;\n    }\n\n    function doLogout() {\n      StorageAPI.destroy();\n      DeviceDAO.destroy();\n    }\n\n    function doRegister(postParams) {\n      var defer = $q.defer();\n\n      DataAdapter.requestApiProxyCredential('POST', apiUrls.register, postParams)\n        .then(function (resData) {\n          if (resData && resData.err && resData.err.code === '0') {\n            /* jshint camelcase:false */\n            /* eslint camelcase:0 */\n            StorageAPI.setMyUserId(postParams.this_user_id);\n            StorageAPI.getAccount('me').email = postParams.email;\n          }\n          defer.resolve(resData);\n        }, function (resData) {\n          defer.reject(resData);\n        });\n\n      return defer.promise;\n    }\n\n    function doResendVerification(postParams) {\n      var promise;\n\n      promise = DataAdapter.requestApiSvrCredential('PUT', apiUrls.resendVerification, postParams);\n\n      return promise;\n    }\n\n    function doChangeEmail(postParams) {\n      var promise;\n\n      promise = DataAdapter.requestApiSvrCredential('PUT', apiUrls.changeEmail, postParams);\n\n      return promise;\n    }\n\n    function requestToChangePwd(postParams) {\n      var promise;\n\n      promise = DataAdapter.requestApiProxyCredential('POST', apiUrls.forgetPwd, postParams);\n\n      return promise;\n    }\n\n    function doResetPwd(postParams) {\n      var promise;\n\n      promise = DataAdapter.requestApiSvrCredential('PUT', apiUrls.resetPwd, postParams);\n\n      return promise;\n    }\n\n    function doVerifyUser(postParams) {\n      var promise;\n\n      promise = DataAdapter.requestApiSvrCredential('PUT', apiUrls.verifyUser, postParams);\n\n      return promise;\n    }\n\n    function getUserVerifyBackUrl(userId) {\n      userId = (userId || '').toLowerCase();\n\n      return InApiUtils.stringFormat(\n        '{0}{1}?un={2}&code={code}', InApiUtils.getAppRootUrl(), APP_CONFIG.userVerifyUrl, base64.encode(userId)\n      );\n    }\n\n    function getResetPwdBackUrl(userId) {\n      userId = (userId || '').toLowerCase();\n\n      return InApiUtils.stringFormat(\n        '{0}{1}?un={2}&code={code}', InApiUtils.getAppRootUrl(), APP_CONFIG.resetPwdUrl, base64.encode(userId)\n      );\n    }\n\n    service.isLogin = isLogin;\n    service.doLogin = doLogin;\n    service.doLogout = doLogout;\n    service.doRegister = doRegister;\n    service.doResendVerification = doResendVerification;\n    service.doChangeEmail = doChangeEmail;\n    service.requestToChangePwd = requestToChangePwd;\n    service.doResetPwd = doResetPwd;\n    service.doVerifyUser = doVerifyUser;\n    service.getUserVerifyBackUrl = getUserVerifyBackUrl;\n    service.getResetPwdBackUrl = getResetPwdBackUrl;\n\n    return service;\n  }\n}());\n"],"file":"secure-auth-factory.js"}