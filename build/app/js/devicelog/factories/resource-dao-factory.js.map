{"version":3,"names":[],"mappings":"","sources":["devicelog/factories/resource-dao-factory.js"],"sourcesContent":["(function () {\n  'use strict';\n\n  angular.module('devicelog')\n    .factory('ResourceDAO', ResourceDAO);\n\n  ResourceDAO.$inject = ['$q', 'InApiUtils', 'StorageAPI', 'DataAdapter'];\n\n  function ResourceDAO($q, InApiUtils, StorageAPI, DataAdapter) {\n    var service = {}, apiUrls;\n\n    apiUrls = {\n      login: '/if/oauth/token',\n      resourceAccounts: '/api/core/1/user/resource_accounts'\n    };\n\n    function addResourceAccount(un, resourceToken, resourceExpiresAt) {\n      /* jshint camelcase:false */\n      /* eslint camelcase:0 */\n      var postParams = {\n        user_id: StorageAPI.getMyUserId(),\n        apsystem: 'DPA',\n        resource_user_id: un,\n        resource_apsystem: 'IFA',\n        resource_token: resourceToken,\n        expires_at: resourceExpiresAt\n      };\n\n      return DataAdapter.requestApiSvrPassword('me', 'PUT', apiUrls.resourceAccounts, postParams);\n    }\n\n    function doLogin(un, pwd) {\n      var defer = $q.defer(), queue, postParams;\n\n      un = (un || '').toLowerCase();\n      pwd = pwd || '';\n      postParams = {\n        username: un,\n        password: pwd\n      };\n\n      /* jshint camelcase:false */\n      /* eslint camelcase:0 */\n      queue = DataAdapter.requestAuthSvrPassword(apiUrls.login, 'IFA', postParams)\n        .then(function (res) {\n          var accessToken, expiresIn, expiresAt;\n\n          res = res || {};\n          accessToken = res.access_token;\n          expiresIn = parseInt(res.expires_in, 10) || 0;\n          expiresAt = new Date().getTime() + 1000 * expiresIn;\n\n          if (accessToken && expiresIn > 0) {\n            StorageAPI.setToken(un, accessToken, expiresIn);\n            return addResourceAccount(un, accessToken, expiresAt);\n          }\n\n          defer.reject(InApiUtils.generateErrPack('resource.auth.failure.0001', 'Token is invalid.'));\n        }, function (res) {\n          defer.reject(res);\n        });\n\n      if (queue) {\n        queue.then(function () {\n          defer.resolve({un: un});\n        }, function () {\n          defer.reject(InApiUtils.generateErrPack('resource.add.failure.0001', 'Fail to add resource.'));\n        });\n      }\n\n      return defer.promise;\n    }\n\n    function deleteResource(un) {\n      /* jshint camelcase:false */\n      /* eslint camelcase:0 */\n      var postParams = {\n        user_id: StorageAPI.getMyUserId(),\n        apsystem: 'DPA',\n        resource_user_id: un,\n        resource_apsystem: 'IFA'\n      };\n\n      return DataAdapter.requestApiSvrPassword('me', 'DELETE', apiUrls.resourceAccounts, postParams);\n    }\n\n    function getResourceList() {\n      var defer = $q.defer(), urlParams;\n\n      /* jshint camelcase:false */\n      /* eslint camelcase:0 */\n      urlParams = {\n        user_id: StorageAPI.getMyUserId(),\n        apsystem: 'DPA'\n      };\n\n      DataAdapter.requestApiSvrPassword('me', 'GET', apiUrls.resourceAccounts, urlParams)\n        .then(function (resData) {\n          var i, cnt = 0, profile;\n\n          if (resData && resData.err && resData.err.code === '0') {\n            resData = InApiUtils.camelizeObj(resData);\n            resData.resourceAccountList = resData.resourceAccountList || [];\n            cnt = resData.resourceAccountList.length;\n\n            for (i = 0; i < cnt; ++i) {\n              profile = resData.resourceAccountList[i];\n              StorageAPI.setAccount(profile.userId, profile);\n              if (profile.token) {\n                StorageAPI.setTokenWithExpiresAt(profile.userId, profile.token.accessToken, profile.token.expiresAt);\n              }\n            }\n\n            defer.resolve(resData.resourceAccountList);\n          } else {\n            defer.reject(resData);\n          }\n        }, function (resData) {\n          defer.reject(resData);\n        });\n\n      return defer.promise;\n    }\n\n    service.doLogin = doLogin;\n    service.deleteResource = deleteResource;\n    service.getResourceList = getResourceList;\n\n    return service;\n  }\n}());\n"],"file":"resource-dao-factory.js"}