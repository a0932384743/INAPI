{"version":3,"names":[],"mappings":"","sources":["devicelog/directives/tableau-viz-directive.js"],"sourcesContent":["(function () {\n  'use strict';\n\n  /**\n   *  Using this directive is as easy as 1, 2, 3.\n   *  1. Grab the Tableau API JavaScript library as well as this module.\n   *    a. <script src=\"path/to/tableau-2.0.0.min.js\"></script>\n   *    b. <script src=\"path/to/angular-tableau.js\"></script>\n   *  2. Import the module into your app and dependencies.\n   *  3. Use the directive like this:\n   *       <tableau-viz height=\"500px\" url=\"path/to/tableau-dashboard\"\n   *         filters=\"{field1: ['item1', 'item2'], dateField: {min: startDate, max: endDate}}\">\n   *       </tableau-viz>\n   *    a. You can add 'showExportImage' and 'showExportPdf' to show export image or the export PDF (hidden by default)\n   *    b. You can add 'showTabs' and 'showToolbar' to show tabs or the toolbar (hidden by default)\n   *    c. Remember to add width or height, as appropriate for your layout (use the width and height\n   *      attributes on the directive). Not sure which one you need? Try the height setting first.\n   */\n\n  angular.module('devicelog')\n    .directive('tableauViz', TableauVizDirective);\n\n  TableauVizDirective.$inject = ['$log', 'Tableau'];\n\n  function TableauVizDirective($log, Tableau) {\n    var directive, devCategory;\n\n    // Define a function to adjust timezone to workbook\n    function filterTimeZone(workbook, filterName, filterValue) {\n      function getLocalTz() {\n        return new Date().getTimezoneOffset() / -60;\n      }\n\n      if (workbook) {\n        filterValue = filterValue || getLocalTz();\n        workbook.changeParameterValueAsync(filterName, filterValue);\n      }\n    }\n\n    // Define a function to apply filters to individual sheet\n    function applyFilterToSheet(sheet, key, filter) {\n      if (sheet) {\n        if (filter.min && filter.max) {\n          sheet.applyRangeFilterAsync(\n            key,\n            {\n              min: filter.min,\n              max: filter.max\n            },\n            Tableau.FilterUpdateType.REPLACE\n          );\n        } else {\n          sheet.applyFilterAsync(key, filter, Tableau.FilterUpdateType.REPLACE);\n        }\n      }\n    }\n\n    // Define a function to apply filters to dashboard\n    function applyFilters(viz, measure, filters) {\n      var i, dash, filtersArr, filterValue, graphSheet, dataSheet;\n\n      dash = viz.getWorkbook().getActiveSheet();\n      filtersArr = Object.keys(filters || {});\n\n      if (devCategory === 'OUTLET') {\n        graphSheet = dash.getWorksheets().get(measure.value + 'Chart');\n        dataSheet = dash.getWorksheets().get(measure.value + 'Data');\n      } else if (devCategory === 'SENSOR') {\n        graphSheet = dash.getWorksheets().get('SensorAttr' + measure.dataType + 'Chart');\n        dataSheet = dash.getWorksheets().get('SensorAttr' + measure.dataType + 'Data');\n      }\n\n      for (i = 0; i < filtersArr.length; ++i) {\n        filterValue = filters[filtersArr[i]];\n        applyFilterToSheet(graphSheet, filtersArr[i], filterValue);\n        applyFilterToSheet(dataSheet, filtersArr[i], filterValue);\n      }\n    }\n\n    // Create the dashboard\n    function createViz(scope, url, config, vizTarget, vizExporter) {\n      var viz;\n      viz = new Tableau.Viz(vizTarget, url, {\n        width: config.width ? config.width : '100%',\n        height: config.height ? config.height : '100%',\n        hideTabs: angular.isDefined(config.hideTabs) ? config.hideTabs : true,\n        hideToolbar: angular.isDefined(config.hideToolbar) ? config.hideToolbar : true,\n        onFirstInteractive: function () {\n          // Creates a PNG file of the current visualization\n          function showExportImageDialog() {\n            if (viz) {\n              try {\n                viz.showExportImageDialog();\n              } finally {\n                angular.noop();\n              }\n            }\n          }\n\n          // Shows a dialog allowing the user to select options for the export\n          function showExportPDFDialog() {\n            try {\n              viz.showExportPDFDialog();\n            } finally {\n              angular.noop();\n            }\n          }\n\n          // Show export icons\n          function showExportIcons() {\n            if (vizExporter) {\n              vizExporter.style.display = 'block';\n            }\n          }\n\n          filterTimeZone(viz.getWorkbook(), 'timezone');\n          applyFilters(viz, config.measure, config.filters);\n          showExportIcons();\n\n          scope.$watch('filters', function (newFilters) {\n            if (viz) {\n              viz.revertAllAsync();\n              filterTimeZone(viz.getWorkbook(), 'timezone');\n            }\n\n            if (newFilters) {\n              applyFilters(viz, config.measure, newFilters);\n            }\n\n            showExportIcons();\n          });\n\n          scope.showExportImageDialog = showExportImageDialog;\n          scope.showExportPDFDialog = showExportPDFDialog;\n        }\n      });\n\n      return viz;\n    }\n\n    function link(scope, element) {\n      var viz, vizTarget, vizExporter, vizConfig;\n\n      devCategory = scope.category;\n      vizTarget = element[0].children[1];\n      vizExporter = element[0].children[0];\n      vizConfig = {\n        hideTabs: angular.isDefined(scope.showTabs) && scope.showTabs.toString() === 'true' ? false : true,\n        hideToolbar: angular.isDefined(scope.showToolbar) && scope.showToolbar.toString() === 'true' ? false : true,\n        width: scope.width,\n        height: scope.height,\n        measure: {},\n        filters: {}\n      };\n\n      if (devCategory !== 'OUTLET' && devCategory !== 'SENSOR') {\n        $log.debug('Error: No proper device category for Tableau Viz.');\n        return;\n      }\n\n      function destroy() {\n        if (viz) {\n          vizExporter.style.display = 'none';\n          viz.dispose();\n        }\n      }\n\n      // We need to have a URL to do anything\n      scope.$watch('url', function (newVal) {\n        if (newVal) {\n          destroy();\n          vizConfig.url = newVal;\n          vizConfig.measure = angular.merge({}, scope.measure);\n          vizConfig.filters = angular.merge({}, scope.filters);\n          viz = createViz(scope, newVal, vizConfig, vizTarget, vizExporter);\n        }\n      });\n\n      // Destroy the dashboard and interval timers upon destroying directive\n      scope.$on('$destroy', destroy);\n    }\n\n    directive = {\n      restrict: 'EA',\n      template:\n        '<div style=\"margin: auto;\" ng-style=\"{width: width || \\'100%\\', display: \\'none\\', }\">' +\n        '<div style=\"text-align: right;\">' +\n        '<button type=\"button\" title=\"Export Image\" ng-click=\"showExportImageDialog()\" ng-if=\"showExportImage\">' +\n        '<i class=\"fa fa-file-image-o\"></i>' +\n        '</button>' +\n        '<button type=\"button\" title=\"Export PDF\" ng-click=\"showExportPDFDialog()\" ng-if=\"showExportPdf\">' +\n        '<i class=\"fa fa-file-text-o\"></i>' +\n        '</button>' +\n        '</div>' +\n        '</div>' +\n        '<div style=\"margin: auto;\">' +\n        '</div>',\n      scope: {\n        width: '@',\n        height: '@',\n        category: '@',\n        url: '@',\n        measure: '=',\n        filters: '=',\n        showTabs: '=',\n        showToolbar: '=',\n        showExportImage: '=',\n        showExportPdf: '='\n      },\n      link: link\n    };\n\n    return directive;\n  }\n}());\n"],"file":"tableau-viz-directive.js"}