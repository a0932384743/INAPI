{"version":3,"names":[],"mappings":"","sources":["core/factories/storage-api-factory.js"],"sourcesContent":["(function () {\n  'use strict';\n\n  angular.module('core')\n    .factory('StorageAPI', StorageAPI);\n\n  StorageAPI.$inject = ['$window', '$log', 'base64', 'InApiUtils'];\n\n  function StorageAPI($window, $log, base64, InApiUtils) {\n    var service = {}, accounts = {}, flagUserVerified = false, returnState = '', TOKENPREFIX = 'token:';\n\n    function Account() {\n      var account = this;\n\n      function init() {\n        account.userId = null;\n        account.userName = null;\n        account.email = null;\n        account.updateTime = null;\n        account.apsystem = null;\n        account.token = {\n          accessToken: null,\n          expiresAt: null\n        };\n      }\n\n      function resetToken() {\n        account.token = {\n          accessToken: null,\n          expiresAt: null\n        };\n      }\n\n      init();\n\n      account.init = init;\n      account.resetToken = resetToken;\n    }\n\n    function read(key) {\n      var value = $window.localStorage.getItem(key);\n\n      if (typeof value === 'undefined' || value === null) {\n        return null;\n      }\n\n      try {\n        value = angular.fromJson(value);\n      } catch (e) {\n        value = value.toString();\n      }\n\n      return value;\n    }\n\n    function write(key, value) {\n      var con = null;\n\n      if (value) {\n        con = value.constructor;\n      }\n\n      if (con && con !== String && con !== Number && con !== Boolean) {\n        value = angular.toJson(value, false);\n      }\n\n      $window.localStorage.setItem(key, value);\n\n      return service;\n    }\n\n    function clear(key) {\n      $window.localStorage.removeItem(key);\n\n      return service;\n    }\n\n    function getToken(un) {\n      var account;\n\n      if (!un) {\n        return null;\n      }\n\n      account = getAccount(un);\n\n      if (!isTokenValid(un)) {\n         // clear token in passing\n        account.resetToken();\n      }\n\n      return account.token;\n    }\n\n    function setToken(un, accessToken, expiresIn) {\n      var account;\n\n      if (un) {\n        expiresIn = parseInt(expiresIn, 10) || 0;\n        account = getAccount(un);\n\n        account.token = {\n          accessToken: accessToken,\n          expiresAt: expiresIn > 0 ? new Date().getTime() + 1000 * expiresIn : null\n        };\n      }\n\n      return service;\n    }\n\n    function setTokenWithExpiresAt(un, accessToken, expiresAt) {\n      var account, currentTimeStamp;\n\n      if (un) {\n        expiresAt = parseInt(expiresAt, 10) || 0;\n        account = getAccount(un);\n        currentTimeStamp = new Date().getTime();\n\n        account.token = {\n          accessToken: accessToken,\n          expiresAt: expiresAt > currentTimeStamp ? expiresAt : null\n        };\n      }\n\n      return service;\n    }\n\n    function readToken(un) {\n      var account;\n\n      if (un) {\n        account = getAccount(un);\n\n        if (un === 'me') {\n          account.token = read(TOKENPREFIX + 'me');\n        } else {\n          account.token = read(TOKENPREFIX + base64.encode(un));\n        }\n\n        if (isTokenValid(un)) {\n          account.token.accessToken = base64.decode(account.token.accessToken);\n          account.token.expiresAt = parseInt(account.token.expiresAt, 10) || 0;\n        } else {\n          account.resetToken();\n        }\n      }\n\n      return service;\n    }\n\n    function readAllToken() {\n      var i, cnt = $window.localStorage.length, key, encryptUn;\n\n      for (i = 0; i < cnt; ++i) {\n        key = $window.localStorage.key(i);\n\n        // start with 'token:'\n        if (key.indexOf(TOKENPREFIX) === 0) {\n          encryptUn = key.replace(TOKENPREFIX, '');\n          if (encryptUn === 'me') {\n            readToken('me');\n          } else {\n            try {\n              readToken(base64.decode(encryptUn));\n            } catch (e) {\n              $log.error(e);\n            }\n          }\n        }\n      }\n    }\n\n    function writeToken(un) {\n      var encryptUn, token, encryptToken;\n\n      if (un) {\n        encryptUn = un === 'me' ? 'me' : base64.encode(un);\n        token = getToken(un);\n\n        if (token && token.accessToken && token.accessToken.length > 0) {\n          // copy token\n          encryptToken = angular.merge({}, token);\n          encryptToken.accessToken = base64.encode(encryptToken.accessToken);\n          write(TOKENPREFIX + encryptUn, encryptToken);\n        } else {\n          write(TOKENPREFIX + encryptUn, null);\n        }\n      }\n\n      return service;\n    }\n\n    function isTokenValid(un) {\n      var token, nowTime = new Date().getTime();\n\n      token = getAccount(un).token;\n\n      //return token && token.accessToken && token.expiresAt && token.expiresAt > nowTime;\n      return true;\n    }\n\n    function clearToken(un) {\n      if (un) {\n        setToken(un, null, null);\n      }\n\n      return service;\n    }\n\n    function getFlagUserVerified() {\n      return flagUserVerified;\n    }\n\n    function setFlagUserVerified(val) {\n      flagUserVerified = val;\n\n      return service;\n    }\n\n    function getAccount(un) {\n      if (!un) {\n        return null;\n      }\n\n      accounts[un] = accounts[un] || new Account();\n\n      return accounts[un];\n    }\n\n    function setAccount(un, data) {\n      var account, key, camelizedKey;\n\n      if (!un) {\n        return null;\n      }\n\n      if (data) {\n        account = accounts[un] || new Account();\n\n        for (key in data) {\n          if (data.hasOwnProperty(key)) {\n            camelizedKey = InApiUtils.camelize(key);\n            account[camelizedKey] = InApiUtils.camelizeObj(data[key]);\n          }\n        }\n\n        account[un] = account;\n      } else {\n        accounts[un] = null;\n      }\n\n      return service;\n    }\n\n    function getMyUserId() {\n      return getAccount('me').userId;\n    }\n\n    function setMyUserId(userId) {\n      getAccount('me').userId = userId;\n\n      return service;\n    }\n\n    function getReturnState() {\n      return returnState;\n    }\n\n    function setReturnState(state) {\n      returnState = state;\n    }\n\n    function destroy() {\n      var un;\n\n      for (un in accounts) {\n        if (accounts.hasOwnProperty(un)) {\n          accounts[un] = null;\n\n          if (un === 'me') {\n            clear(TOKENPREFIX + 'me');\n          } else {\n            clear(TOKENPREFIX + base64.encode(un));\n          }\n        }\n      }\n\n      return service;\n    }\n\n    service.read = read;\n    service.write = write;\n    service.clear = clear;\n    service.getToken = getToken;\n    service.setToken = setToken;\n    service.setTokenWithExpiresAt = setTokenWithExpiresAt;\n    service.readToken = readToken;\n    service.readAllToken = readAllToken;\n    service.writeToken = writeToken;\n    service.clearToken = clearToken;\n    service.isTokenValid = isTokenValid;\n    service.getAccount = getAccount;\n    service.setAccount = setAccount;\n    service.getFlagUserVerified = getFlagUserVerified;\n    service.setFlagUserVerified = setFlagUserVerified;\n    service.getMyUserId = getMyUserId;\n    service.setMyUserId = setMyUserId;\n    service.getReturnState = getReturnState;\n    service.setReturnState = setReturnState;\n    service.destroy = destroy;\n\n    return service;\n  }\n}());\n"],"file":"storage-api-factory.js"}