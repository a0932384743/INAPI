{"version":3,"names":[],"mappings":"","sources":["core/factories/data-adapter-factory.js"],"sourcesContent":["(function () {\n  'use strict';\n\n  angular.module('core')\n    .factory('DataAdapter', DataAdapter);\n\n  DataAdapter.$inject = ['$http', '$httpParamSerializerJQLike', '$q', '$log', '$state', '$translate', 'dialogs',\n                          'APP_CONFIG', 'InApiUtils', 'StorageAPI'];\n\n  function DataAdapter($http, $httpParamSerializerJQLike, $q, $log, $state, $translate, dialogs,\n                        APP_CONFIG, InApiUtils, StorageAPI) {\n    var service = {}, httpTimeoutMilliSeconds;\n\n    httpTimeoutMilliSeconds = parseInt(APP_CONFIG.httpTimeoutMilliSeconds, 10) || 60000;\n\n    function requestRemoteSvr(config) {\n      var defer, promise;\n\n      defer = $q.defer();\n      promise = defer.promise;\n\n      config = config.timeout ? config : angular.extend(config, {\n        timeout: httpTimeoutMilliSeconds\n      });\n\n      config.headers = angular.merge(config.headers || {}, {\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n      });\n\n      $http(config).then(function (res) {\n        if (res && res.data) {\n          defer.resolve(res.data);\n        } else {\n          defer.reject(InApiUtils.generateErrPack('r9999', 'No result after requesting remote server!'));\n        }\n      }, function (res) {\n        if (res.status === -1) {\n          dialogs.notify($translate.instant('NOTIFICATION_TITLE'), $translate.instant('HTTP_REQUEST_TIMEOUT'));\n          defer.reject(InApiUtils.generateErrPack('-1', 'The Request is timeout.'));\n        } else if (res.data) {\n          defer.reject(res.data);\n        } else {\n          defer.reject(InApiUtils.generateErrPack('r9998', 'An error occurs when requesting remote server!'));\n        }\n      });\n\n      return promise;\n    }\n\n    function requestAuthSvrCredential() {\n      /* jshint camelcase:false */\n      /* eslint camelcase:0 */\n      var config = {\n        method: 'POST',\n        url: APP_CONFIG.authSvrUrl + '/ec/oauth/token',\n        data: $httpParamSerializerJQLike({\n          client_id: APP_CONFIG.credentialClientId,\n          client_secret: APP_CONFIG.credentialClientSecret,\n          grant_type: 'client_credentials',\n          apsystem: 'DPA'\n        })\n      };\n\n      return requestRemoteSvr(config);\n    }\n\n    function requestAuthSvrPassword(apiPath, apsystem, postParams) {\n      var config, promise, un = postParams.username;\n\n      /* jshint camelcase:false */\n      /* eslint camelcase:0 */\n      postParams = angular.merge(postParams || {}, {\n        client_id: APP_CONFIG.passwordClientId,\n        client_secret: APP_CONFIG.passwordClientSecret,\n        grant_type: 'password',\n        apsystem: apsystem\n      });\n\n      config = {\n        method: 'POST',\n        url: APP_CONFIG.authSvrUrl + apiPath,\n        data: $httpParamSerializerJQLike(postParams)\n      };\n\n      promise = requestRemoteSvr(config);\n      promise.then(function (data) {\n        var profile, now;\n\n        if (apsystem === 'DPA') {\n          StorageAPI.setToken('me', data.access_token, data.expires_in);\n          StorageAPI.writeToken('me');\n        } else if (un) {\n          now = new Date().getTime();\n\n          profile = {\n            userId: un,\n            token: {\n              accessToken: data.access_token || '',\n              expiresAt: now + 1000 * parseInt(data.expires_in, 10)\n            }\n          };\n\n          StorageAPI.setAccount(un, profile);\n        }\n      });\n\n      return promise;\n    }\n\n    function requestApiSvrCredential(method, apiPath, rqtParams) {\n      var queue;\n\n      queue = requestAuthSvrCredential()\n        .then(function (resData) {\n          var data, config;\n\n          /* jshint camelcase:false */\n          /* eslint camelcase:0 */\n          data = {\n            client_id: APP_CONFIG.credentialClientId,\n            client_secret: APP_CONFIG.credentialClientSecret,\n            grant_type: 'client_credentials'\n          };\n\n          config = {\n            method: method,\n            url: APP_CONFIG.apiSvrUrl + apiPath,\n            data: $httpParamSerializerJQLike(angular.merge(rqtParams || {}, data)),\n            headers: {\n              Authorization: 'Bearer ' + resData.access_token\n            }\n          };\n\n          return requestRemoteSvr(config);\n        }, function (resData) {\n          $log.info(resData);\n        });\n\n      return queue;\n    }\n\n    function requestApiSvrPassword(un, method, apiPath, rqtParams) {\n      var defer, data, config;\n\n      if (!StorageAPI.isTokenValid(un)) {\n        defer = $q.defer();\n        defer.reject(InApiUtils.generateErrPack('r8999', 'The access token is expired!'));\n\n        if (un === 'me') {\n          $state.go(APP_CONFIG.logoutState);\n        }\n\n        return defer.promise;\n      }\n\n      /* jshint camelcase:false */\n      /* eslint camelcase:0 */\n      data = {\n        client_id: APP_CONFIG.passwordClientId,\n        client_secret: APP_CONFIG.passwordClientSecret,\n        grant_type: 'password'\n      };\n\n      config = {\n        method: method,\n        url: APP_CONFIG.apiSvrUrl + apiPath,\n        headers: {\n          Authorization: 'Bearer ' + StorageAPI.getToken(un).accessToken\n        }\n      };\n\n      if (method === 'POST' || method === 'PUT') {\n        config.data = $httpParamSerializerJQLike(angular.merge(rqtParams || {}, data));\n      } else if (method === 'GET' || method === 'DELETE') {\n        config.params = angular.merge(rqtParams || {}, data);\n        config.paramSerializer = $httpParamSerializerJQLike;\n      }\n\n      return requestRemoteSvr(config);\n    }\n\n    function requestApiProxyCredential(method, apiPath, rqtParams) {\n      var queue = requestAuthSvrCredential()\n        .then(function (resData) {\n          var data, config;\n\n          /* jshint camelcase:false */\n          /* eslint camelcase:0 */\n          data = {\n            svrtype: 'API',\n            webapi: apiPath,\n            client_id: APP_CONFIG.credentialClientId,\n            client_secret: APP_CONFIG.credentialClientSecret,\n            grant_type: 'client_credentials'\n          };\n\n          config = {\n            method: method,\n            url: APP_CONFIG.apiProxyUrl,\n            data: $httpParamSerializerJQLike(angular.merge(rqtParams || {}, data)),\n            headers: {\n              Authorization: 'Bearer ' + resData.access_token\n            }\n          };\n\n          return requestRemoteSvr(config);\n        }, function (resData) {\n          $log.info(resData);\n        });\n\n      return queue;\n    }\n\n    service.requestRemoteSvr = requestRemoteSvr;\n    service.requestAuthSvrCredential = requestAuthSvrCredential;\n    service.requestAuthSvrPassword = requestAuthSvrPassword;\n    service.requestApiSvrCredential = requestApiSvrCredential;\n    service.requestApiSvrPassword = requestApiSvrPassword;\n    service.requestApiProxyCredential = requestApiProxyCredential;\n\n    return service;\n  }\n}());\n"],"file":"data-adapter-factory.js"}