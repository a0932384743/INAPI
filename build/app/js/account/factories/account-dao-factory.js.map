{"version":3,"names":[],"mappings":"","sources":["account/factories/account-dao-factory.js"],"sourcesContent":["(function () {\n  'use strict';\n\n  angular.module('account')\n    .factory('AccountDAO', AccountDAO);\n\n  AccountDAO.$inject = ['$q', 'APP_CONFIG', 'StorageAPI', 'DataAdapter'];\n\n  function AccountDAO($q, APP_CONFIG, StorageAPI, DataAdapter) {\n    var service = {}, apiUrls;\n\n    apiUrls = {\n      myInfo: '/api/core/1/user/me',\n      changeUserInfo: '/api/core/1/user/info',\n      retrieveCredential: '/api/core/1/user/developer_credentials'\n    };\n\n    function getMyInfo() {\n      var defer = $q.defer(), myAccount = StorageAPI.getAccount('me');\n\n      if (myAccount.updateTime) {\n        defer.resolve(myAccount);\n      } else {\n        DataAdapter.requestApiSvrPassword('me', 'GET', apiUrls.myInfo)\n          .then(function (resData) {\n            if (resData && resData.err && resData.err.code === '0') {\n              myAccount = resData.user;\n              StorageAPI.setAccount('me', myAccount);\n              defer.resolve(StorageAPI.getAccount('me'));\n            } else {\n              defer.reject(resData);\n            }\n          }, function (resData) {\n            defer.reject(resData);\n          });\n      }\n\n      return defer.promise;\n    }\n\n    function doRetrieveCredential(apsystem, userId) {\n      var defer = $q.defer(), myAccount = StorageAPI.getAccount('me'), credential = {}, postParams;\n\n      if (myAccount.credential && myAccount.credential.clientId) {\n        defer.resolve(myAccount.credential);\n      } else {\n        /* jshint camelcase:false */\n        /* eslint camelcase:0 */\n        postParams = {\n          apsystem: apsystem || '',\n          user_id: userId || '',\n          code: APP_CONFIG.retrieveCredentialCode\n        };\n\n        DataAdapter.requestApiSvrPassword('me', 'GET', apiUrls.retrieveCredential, postParams)\n          .then(function (resData) {\n            if (resData && resData.err && resData.err.code === '0') {\n              credential = {\n                clientId: resData.client_id,\n                clientSecret: resData.client_secret\n              };\n\n              if (myAccount) {\n                myAccount.credential = credential;\n                StorageAPI.setAccount('me', myAccount);\n              }\n              defer.resolve(credential);\n            } else {\n              defer.reject(resData);\n            }\n          }, function (resData) {\n            defer.reject(resData);\n          });\n      }\n\n      return defer.promise;\n    }\n\n    function doChangeUserName(userName) {\n      var defer = $q.defer(), postParams;\n\n      getMyInfo().then(function (me) {\n        /* jshint camelcase:false */\n        /* eslint camelcase:0 */\n        postParams = {\n          user_id: me.userId,\n          apsystem: 'DPA',\n          this_user_id: me.userId,\n          this_apsystem: 'DPA',\n          user_name: userName || ''\n        };\n\n        return DataAdapter.requestApiSvrPassword('me', 'PUT', apiUrls.changeUserInfo, postParams);\n      }).then(function (resData) {\n        if (resData && resData.err && resData.err.code === '0') {\n          StorageAPI.getAccount('me').userName = userName;\n          defer.resolve(userName);\n        } else {\n          defer.reject(resData);\n        }\n      }, function (resData) {\n        defer.reject(resData);\n      });\n\n      return defer.promise;\n    }\n\n    function doChangeUserEmail(email, pwd) {\n      var defer = $q.defer(), postParams;\n\n      email = (email || '').toLowerCase();\n\n      getMyInfo().then(function (me) {\n        /* jshint camelcase:false */\n        /* eslint camelcase:0 */\n        postParams = {\n          user_id: me.userId,\n          apsystem: 'DPA',\n          this_user_id: me.userId,\n          this_apsystem: 'DPA',\n          email: email,\n          pwd: pwd || ''\n        };\n\n        return DataAdapter.requestApiSvrPassword('me', 'PUT', apiUrls.changeUserInfo, postParams);\n      }).then(function (resData) {\n        if (resData && resData.err && resData.err.code === '0') {\n          StorageAPI.getAccount('me').email = email;\n          defer.resolve(email);\n        } else {\n          defer.reject(resData);\n        }\n      }, function (resData) {\n        defer.reject(resData);\n      });\n\n      return defer.promise;\n    }\n\n    function doChangeUserPwd(pwd, newPwd) {\n      var defer = $q.defer(), postParams;\n\n      getMyInfo().then(function (me) {\n        /* jshint camelcase:false */\n        /* eslint camelcase:0 */\n        postParams = {\n          user_id: me.userId,\n          apsystem: 'DPA',\n          this_user_id: me.userId,\n          this_apsystem: 'DPA',\n          pwd: pwd || '',\n          new_pwd: newPwd || ''\n        };\n\n        return DataAdapter.requestApiSvrPassword('me', 'PUT', apiUrls.changeUserInfo, postParams);\n      }).then(function (resData) {\n        defer.resolve(resData);\n      }, function (resData) {\n        defer.reject(resData);\n      });\n\n      return defer.promise;\n    }\n\n    service.getMyInfo = getMyInfo;\n    service.doRetrieveCredential = doRetrieveCredential;\n    service.doChangeUserName = doChangeUserName;\n    service.doChangeUserEmail = doChangeUserEmail;\n    service.doChangeUserPwd = doChangeUserPwd;\n\n    return service;\n  }\n}());\n"],"file":"account-dao-factory.js"}